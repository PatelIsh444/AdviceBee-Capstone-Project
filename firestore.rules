rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  
    match /Notification/{document=**} {
      allow read;
      allow write: if request.auth != null;
    }
    
    match /reports/{document=**} {
      allow read;
      allow write: if request.auth != null;
    }

    match /chats/{document=**} {
      allow read;
      allow write: if request.auth != null;
    }

    match /messages/{document=**} {
      allow read;
      allow write: if request.auth != null;
    }

    match /groups/{groupId} {
    	allow read;
      allow update: if request.auth != null; // TODO: update current logic to use FB-Functions instead of direct modification.
      allow create: if userIsQueenBee() || userIsAdmin();
      allow delete: if isOwnerOfGroup() || userIsAdmin();

      function userIsQueenBee() {
        return getUser().rank == 'Queen Bee';
      }

      function isOwnerOfGroup() {
      	return ("createdBy" in existingData()) && existingData().createdBy == request.auth.uid;
      }
    }
    
    match /groups/{groupId}/groupQuestions/{question} {
      allow read: if groupIsOpenToPublic(groupId) || userIsApartOfGroup(groupId) || userIsAdmin();
      allow create: if userIsApartOfGroup(groupId) || userIsAdmin();
      allow update: if isOwnerOfPost() || userIsAdmin();
      allow delete: if isOwnerOfPost() || userIsAdmin();

      function getGroupData(groupId) {
        return get(/databases/$(database)/documents/groups/$(groupId)).data;
      }
    
      function groupIsOpenToPublic(groupId) {
        return (("privateGroup" in getGroupData(groupId)) && getGroupData(groupId).privateGroup == false) || (("publicGroup" in getGroupData(groupId)) && getGroupData(groupId).publicGroup == true);
      }

      function userIsApartOfGroup(groupId) {
        return ("joinedGroups" in getUser()) && getUser().joinedGroups.hasAll([groupId]);
      }

      function isOwnerOfPost() {
      	return ("createdBy" in existingData()) && existingData().createdBy == request.auth.uid;
      }
    }
    
    match /topics/{topic} {
    	allow read;
      allow write: if userIsAdmin();
    }

    match /{path=**}/topicQuestions/{topic} {
      allow read;
    }

    match /topics/{topic}/topicQuestions/{question} {
    	allow read;
      allow create: if userSubscribesToTopic(topic) || userIsAdmin();
      allow update: if (isOwnerOfPost() && postHasNoResponses()) || userIsAdmin(); 
      allow delete: if isOwnerOfPost() || userIsAdmin();
      
      function userSubscribesToTopic(topic) {
        return ("myTopics" in getUser()) && getUser().myTopics.hasAll([topic]);
      }

      function isOwnerOfPost() {
      	return ("createdBy" in existingData()) && existingData().createdBy == request.auth.uid;
      }

      function postHasNoResponses() {
        return ("numOfResponses" in existingData()) && existingData().numOfResponses == 0;
      }
    }
    
		match /users/{uid} {
    	allow read;
      allow create: if request.auth.uid != null;
      allow update: if (userIsOwner(uid) && userRankNotChanged()) || userIsAdmin();
      allow delete: if userIsOwner(uid) || userIsAdmin();

      function userRankNotChanged() {
        return ("rank" in existingData()) && ("rank" in incomingData()) && existingData().rank == incomingData().rank;
      }
    }
    
    function getUser() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function userIsOwner(uid) {
      return request.auth.uid == uid;
    }

    function userIsAdmin() {
      return ("rank" in getUser()) && getUser().rank == "Admin";
    }

    function existingData() {
      return resource.data;
    }
    
    function incomingData() {
      return request.resource.data;
    }
  }
}